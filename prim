bool prim(list<dados> grafo){

    tab aux;
    list<dados>::iterator g = grafo.begin();
    list<tab> arv;
    int cont = g->numero_v, x, z;
    string vi, atual, y;

    while(cont--){
        aux.vert = g->rotulo;
        aux.cust = INT_MAX;
        aux.vindod = "-";
        aux.fec='n';
        arv.push_back(aux);
        g++;
        //cout << aux.vert << " " << aux.cust << " " << aux.vindod << " "  << aux.fec <<endl;
    }

    cout << "Digite o vertice inicial da arvore: ";
    cin >> vi;

    for(auto it=arv.begin(); it!=arv.end(); it++){
        if(vi==it->vert){
            it->cust=0;
        }
    }

    atual=vi;

    for(auto it=arv.begin(); it!=arv.end(); it++){

        for(auto it=grafo.begin(); it!=grafo.end(); it++){

            if(atual==it->v_inicial){
                y=it->v_final;
                x=it->custo;
                for(auto it=arv.begin(); it!=arv.end(); it++){
                    if(it->vert==y && it->fec=='n'){
                        it->cust=x;
                        it->vindod=atual;
                    }
                }

            }else if(atual==it->v_final){
                y=it->v_inicial;
                x=it->custo;
                for(auto it=arv.begin(); it!=arv.end(); it++){
                    if(it->vert==y && it->fec=='n'){
                        it->cust=x;
                        it->vindod=atual;
                    }
                }
            }
        }

        for(auto it=arv.begin(); it!=arv.end(); it++){
            if(atual==it->vert) it->fec='s';
        }
        for(auto it=arv.begin(); it!=arv.end(); it++){
            if(it->fec=='n'){
                atual=it->vert;
                z=it->cust;
                break;
            }
        }
        for(auto it=arv.begin(); it!=arv.end(); it++){
            if(it->fec=='n' && it->cust<z){
                atual=it->vert;
            }
        }

    }

    cout << endl;

    for(auto it=arv.begin(); it!=arv.end(); it++){
        cout << it->vert << " " << it->cust << " " << it->vindod << " "  << it->fec <<endl;
    }

    cout << endl;

}
